// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankingSystem.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240320094658_UserIdentity")]
    partial class UserIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankingSystem.API.Models.Accounts", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AccountCreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AccountCreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AccountModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AccountModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<long>("AccountNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("AtmCardNum")
                        .HasColumnType("bigint");

                    b.Property<int>("AtmCardPin")
                        .HasColumnType("integer");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountCreatedBy");

                    b.HasIndex("AccountModifiedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BankingSystem.API.Models.KycDocument", b =>
                {
                    b.Property<Guid>("KYCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CitizenshipImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GrandFatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("KYCId");

                    b.HasIndex("UserId");

                    b.ToTable("KycDocument");
                });

            modelBuilder.Entity("BankingSystem.API.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasMaxLength(50)
                        .HasColumnType("double precision");

                    b.Property<string>("TransactionRemarks")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("BankingSystem.API.Models.Users", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("ed5db673-53ab-4ac3-a441-8f5b2ba93361"),
                            AccessFailedCount = 0,
                            Address = "Gothatar, Kathmandu",
                            ConcurrencyStamp = "ac43dbbe-42b7-4001-b588-3a7b1f3192b8",
                            CreatedAt = new DateTime(2024, 3, 20, 9, 46, 57, 601, DateTimeKind.Utc).AddTicks(5958),
                            DateOfBirth = new DateTime(2002, 8, 20, 16, 58, 25, 342, DateTimeKind.Utc),
                            Email = "subritiaryal13@gmail.com",
                            EmailConfirmed = false,
                            Fullname = "Subriti Aryal",
                            Id = "e1fe81c3-ad21-48dc-8b59-c01b8fa07cd2",
                            LockoutEnabled = false,
                            ModifiedAt = new DateTime(2024, 3, 20, 9, 46, 57, 601, DateTimeKind.Utc).AddTicks(6007),
                            Password = "$2b$10$5v3kSWwbdSH7pFY426qCp.60B5EhF7ZtWdXRGulf44ItvpVem5JOK",
                            PhoneNumber = "9843346520",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "173578a5-61f6-4e71-8a2a-226330912d96",
                            TwoFactorEnabled = false,
                            UserType = 0,
                            Username = "subs"
                        },
                        new
                        {
                            UserId = new Guid("eee3dcbb-5de0-4ea6-8e1c-4c219c253c86"),
                            AccessFailedCount = 0,
                            Address = "Kathmandu",
                            ConcurrencyStamp = "0df0bd11-b855-4349-9332-e470cd335097",
                            CreatedAt = new DateTime(2024, 3, 20, 9, 46, 57, 740, DateTimeKind.Utc).AddTicks(6099),
                            DateOfBirth = new DateTime(2000, 3, 23, 16, 58, 25, 342, DateTimeKind.Utc),
                            Email = "teller@gmail.com",
                            EmailConfirmed = false,
                            Fullname = "Teller Person",
                            Id = "0dc4952a-9d27-4872-ada9-59320da0bd1a",
                            LockoutEnabled = false,
                            ModifiedAt = new DateTime(2024, 3, 20, 9, 46, 57, 740, DateTimeKind.Utc).AddTicks(6120),
                            Password = "$2b$10$U.fpfdedWF9/TqRO3hblwu/2IzRvDIVksGnIBZjkA6PmfHMQcy3Ua",
                            PhoneNumber = "9826274833",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40493b87-7e7c-487a-93f1-197bbddecb4a",
                            TwoFactorEnabled = false,
                            UserType = 1,
                            Username = "admin"
                        },
                        new
                        {
                            UserId = new Guid("3e008792-1507-49d6-ae9b-db0280a69951"),
                            AccessFailedCount = 0,
                            Address = "Kathmandu",
                            ConcurrencyStamp = "17a92e6d-44ef-4885-9c4a-9e561c019e5b",
                            CreatedAt = new DateTime(2024, 3, 20, 9, 46, 57, 914, DateTimeKind.Utc).AddTicks(431),
                            DateOfBirth = new DateTime(2000, 3, 23, 16, 58, 25, 342, DateTimeKind.Utc),
                            Email = "accountUser@gmail.com",
                            EmailConfirmed = false,
                            Fullname = "Account Holder",
                            Id = "9d16a167-a919-4bd0-bda9-5f452a3b589c",
                            LockoutEnabled = false,
                            ModifiedAt = new DateTime(2024, 3, 20, 9, 46, 57, 914, DateTimeKind.Utc).AddTicks(456),
                            Password = "$2b$10$gXYfVW.8yCNdS.7tFFAwbuT2SnzIU0tjjYjSaytG9Z1sJ6/7EM4.i",
                            PhoneNumber = "9830274849",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4ed2d74-21ce-45f5-b814-7b4772bf3a39",
                            TwoFactorEnabled = false,
                            UserType = 0,
                            Username = "user"
                        });
                });

            modelBuilder.Entity("BankingSystem.API.Models.Accounts", b =>
                {
                    b.HasOne("BankingSystem.API.Models.Users", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("AccountCreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankingSystem.API.Models.Users", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("AccountModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankingSystem.API.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankingSystem.API.Models.KycDocument", b =>
                {
                    b.HasOne("BankingSystem.API.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankingSystem.API.Models.Transaction", b =>
                {
                    b.HasOne("BankingSystem.API.Models.Accounts", "Accounts")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
