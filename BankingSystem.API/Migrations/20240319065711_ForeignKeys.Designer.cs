// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankingSystem.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240319065711_ForeignKeys")]
    partial class ForeignKeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankingSystem.API.Models.Accounts", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AccountCreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AccountCreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AccountModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AccountModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<long>("AccountNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("AtmCardNum")
                        .HasColumnType("bigint");

                    b.Property<int>("AtmCardPin")
                        .HasColumnType("integer");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountCreatedBy");

                    b.HasIndex("AccountModifiedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BankingSystem.API.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasMaxLength(50)
                        .HasColumnType("double precision");

                    b.Property<string>("TransactionRemarks")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("BankingSystem.API.Models.Users", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("33101bf4-23cf-4d25-9d49-d1a3607945b3"),
                            Address = "Gothatar, Kathmandu",
                            CreatedAt = new DateTime(2024, 3, 19, 6, 57, 10, 137, DateTimeKind.Utc).AddTicks(6429),
                            DateOfBirth = new DateTime(2002, 8, 20, 16, 58, 25, 342, DateTimeKind.Utc),
                            Email = "subritiaryal13@gmail.com",
                            Fullname = "Subriti Aryal",
                            ModifiedAt = new DateTime(2024, 3, 19, 6, 57, 10, 137, DateTimeKind.Utc).AddTicks(6446),
                            Password = "$2b$10$LG.NXzRS.y/VIF0Fkxhg0emd3q4I5n.H6FjxaW8fQSdLrI8z3iG7K",
                            UserType = 0,
                            Username = "subs"
                        },
                        new
                        {
                            UserId = new Guid("e2a3d57f-0f34-4b71-a2f9-4c87777e6c2b"),
                            Address = "Kathmandu",
                            CreatedAt = new DateTime(2024, 3, 19, 6, 57, 10, 417, DateTimeKind.Utc).AddTicks(3035),
                            DateOfBirth = new DateTime(2000, 3, 23, 16, 58, 25, 342, DateTimeKind.Utc),
                            Email = "teller@gmail.com",
                            Fullname = "Teller Person",
                            ModifiedAt = new DateTime(2024, 3, 19, 6, 57, 10, 417, DateTimeKind.Utc).AddTicks(3062),
                            Password = "$2b$10$/x.zWa.Iv3Ri0UXzabb9TOzCRlWMQ0NRoyHp6hWsoQsSQWsU/.dMu",
                            UserType = 1,
                            Username = "admin"
                        },
                        new
                        {
                            UserId = new Guid("10262b22-69d0-4126-a513-e887ae6dac61"),
                            Address = "Kathmandu",
                            CreatedAt = new DateTime(2024, 3, 19, 6, 57, 10, 602, DateTimeKind.Utc).AddTicks(682),
                            DateOfBirth = new DateTime(2000, 3, 23, 16, 58, 25, 342, DateTimeKind.Utc),
                            Email = "accountUser@gmail.com",
                            Fullname = "Account Holder",
                            ModifiedAt = new DateTime(2024, 3, 19, 6, 57, 10, 602, DateTimeKind.Utc).AddTicks(698),
                            Password = "$2b$10$.SfWGzq2faMIbJ4QO5uvteRCddoRHTnCSAM6afqHbLARL.WAmXoNi",
                            UserType = 0,
                            Username = "user"
                        });
                });

            modelBuilder.Entity("BankingSystem.API.Models.Accounts", b =>
                {
                    b.HasOne("BankingSystem.API.Models.Users", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("AccountCreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankingSystem.API.Models.Users", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("AccountModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankingSystem.API.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankingSystem.API.Models.Transaction", b =>
                {
                    b.HasOne("BankingSystem.API.Models.Accounts", "Accounts")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
