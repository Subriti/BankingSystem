// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankingSystem.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240321043742_seed_users")]
    partial class seed_users
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankingSystem.API.Models.Accounts", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("AccountNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("AtmCardNum")
                        .HasColumnType("bigint");

                    b.Property<int>("AtmCardPin")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("BankingSystem.API.Models.KycDocument", b =>
                {
                    b.Property<Guid>("KYCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CitizenshipImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GrandFatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("KYCId");

                    b.HasIndex("UserId");

                    b.ToTable("KycDocuments");
                });

            modelBuilder.Entity("BankingSystem.API.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasMaxLength(50)
                        .HasColumnType("numeric");

                    b.Property<string>("TransactionRemarks")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BankingSystem.API.Models.Users", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserId");

                    b.ToTable("SystemUser");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("877aabaf-4d57-48a4-b082-d463727e6e9d"),
                            Address = "Gothatar, Kathmandu",
                            CreatedAt = new DateTime(2024, 3, 21, 4, 37, 41, 139, DateTimeKind.Utc).AddTicks(5019),
                            DateOfBirth = new DateTime(2002, 8, 20, 16, 58, 25, 342, DateTimeKind.Utc),
                            Email = "subritiaryal13@gmail.com",
                            Fullname = "Subriti Aryal",
                            ModifiedAt = new DateTime(2024, 3, 21, 4, 37, 41, 139, DateTimeKind.Utc).AddTicks(5036),
                            Password = "$2b$10$pcdbIwIooJRwkETq6SSbY.6HYNDxl0gUQBEliwJ4e7oGR6GfKCV/K",
                            UserType = 0,
                            Username = "subs"
                        },
                        new
                        {
                            UserId = new Guid("e03bae37-9270-457d-8829-fa51a825be76"),
                            Address = "Kathmandu",
                            CreatedAt = new DateTime(2024, 3, 21, 4, 37, 41, 234, DateTimeKind.Utc).AddTicks(9920),
                            DateOfBirth = new DateTime(2000, 3, 23, 16, 58, 25, 342, DateTimeKind.Utc),
                            Email = "teller@gmail.com",
                            Fullname = "Teller Person",
                            ModifiedAt = new DateTime(2024, 3, 21, 4, 37, 41, 234, DateTimeKind.Utc).AddTicks(9934),
                            Password = "$2b$10$uR.qZ.nj1vYSUwRSiMVUk.Hq4takkc1XR0/XCzoczjTm7Er0/HjuK",
                            UserType = 1,
                            Username = "admin"
                        },
                        new
                        {
                            UserId = new Guid("ebfa3176-bde0-47bf-9c4a-8a284633989f"),
                            Address = "Kathmandu",
                            CreatedAt = new DateTime(2024, 3, 21, 4, 37, 41, 326, DateTimeKind.Utc).AddTicks(2983),
                            DateOfBirth = new DateTime(2000, 3, 23, 16, 58, 25, 342, DateTimeKind.Utc),
                            Email = "accountUser@gmail.com",
                            Fullname = "Account Holder",
                            ModifiedAt = new DateTime(2024, 3, 21, 4, 37, 41, 326, DateTimeKind.Utc).AddTicks(2999),
                            Password = "$2b$10$N6cpU5rnKgRIXl/Rj1.fzOF4da7VDS5pFwGlDAReW/ghYGeWY1CMy",
                            UserType = 0,
                            Username = "user"
                        });
                });

            modelBuilder.Entity("BankingSystem.API.Models.Accounts", b =>
                {
                    b.HasOne("BankingSystem.API.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankingSystem.API.Models.KycDocument", b =>
                {
                    b.HasOne("BankingSystem.API.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankingSystem.API.Models.Transaction", b =>
                {
                    b.HasOne("BankingSystem.API.Models.Accounts", "Accounts")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
